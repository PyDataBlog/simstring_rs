name: Rust CI/CD

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          # On pull requests, check out the head ref so we can commit to it
          ref: ${{ github.head_ref }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y build-essential simstring-bin

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - name: Set up Julia
        uses: julia-actions/setup-julia@v2
        with:
          version: "1.11"

      - name: Run and Compare Benchmarks
        run: |
          # Install python dependencies
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install simstring-fast pandas maturin tabulate
          rm -rf target/wheels
          maturin build --release
          uv pip install target/wheels/*.whl
          # Install ruby dependencies
          gem install simstring_pure descriptive_statistics json
          # Install julia dependencies
          julia -e 'using Pkg; Pkg.add(["SimString", "BenchmarkTools", "Statistics", "JSON"])'
          # Run benchmarks
          echo "Running and Comparing Benchmarks..."
          python benches/run_benches.py

      - name: Commit benchmark results
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "docs(benchmarks): update benchmark results"
          file_pattern: BENCHMARKS.md

  test:
    name: Test on ${{ matrix.os }} / ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross

      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo clippy --target ${{ matrix.target }} -- -D warnings

      - name: Run clippy (cross)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross clippy --target ${{ matrix.target }} -- -D warnings

      - name: Run tests
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo test --target ${{ matrix.target }} --verbose

      - name: Run tests (cross)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross test --target ${{ matrix.target }} --verbose

      - name: Run Python binding tests
        shell: bash
        run: |
          pip install uv
          uv venv
          if [ "$RUNNER_OS" == "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          uv pip install maturin pytest
          rm -rf target/wheels
          maturin build --release
          uv pip install target/wheels/*.whl
          pytest tests/python/ -vv

      - name: Build
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --target ${{ matrix.target }} --verbose

      - name: Build (cross)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross build --target ${{ matrix.target }} --verbose

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist
          # Build universal2 wheels on macOS
          target: ${{ runner.os == 'macOS' && 'universal2-apple-darwin' || '' }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist

  test_wheels:
    name: Test wheels on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14, macos-15]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Exclude Python 3.10 on macos-14 due to known issues with setup-python
          - os: macos-14
            python-version: "3.10"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Install wheel and test dependencies
        shell: bash
        run: |
          pip install uv
          uv venv
          if [ "$RUNNER_OS" == "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          uv pip install pytest
          uv pip install simstring-rust --no-index --find-links dist/ --force-reinstall

      - name: Run Python binding tests
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          pytest tests/python/ -vv

  publish_to_test_pypi:
    name: Publish to TestPyPI
    needs: [test_wheels]
    runs-on: ubuntu-latest
    # Run on pushes to main, but not on tags
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/simstring-rust
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Publish to TestPyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing
          repository-url: https://test.pypi.org

  publish_to_pypi:
    name: Publish to PyPI
    needs: [test_wheels, publish]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/simstring-rust
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing

  run-examples:
    name: Run Examples
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run Rust example
        run: cargo run --example basic --release

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Run Python example
        shell: bash
        run: |
          pip install uv
          uv venv
          if [ "$RUNNER_OS" == "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          uv pip install maturin
          rm -rf target/wheels
          maturin build --release
          uv pip install target/wheels/*.whl
          python examples/python_basic.py

  # Publish to crates.io on new tags
  publish:
    name: Publish to crates.io
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check package
        run: cargo package

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
