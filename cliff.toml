# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog
All notable changes to this project will be documented in this file.

"""
# template for the changelog body
# https://git-cliff.org/docs/configuration/changelog#body
body = """
{% if version %}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}
    ## [unreleased]
{% endif %}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}(**{{ commit.scope }}**) {% endif %}{{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.hyperlink }}))
    {% endfor %}
{% endfor %}

"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process the commits starting from the latest tag
starting_commit = "v0.1.0"
# sort the commits inside sections by oldest first
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
# regex for parsing parts of a commit
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^perf", group = "Performance"},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^chore\\(release\\):", skip = true},
    { message = "^chore", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# list of commit types that are allowed to be breaking changes
allowed_breaking_commit_types = ["feat", "fix"]
# regex for matching git tags
tag_pattern = "v[0-9].*"
# skip git tags that are not valid SemVer
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""